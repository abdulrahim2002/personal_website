[{"content":"Introduction When you install vim, a usual requirement as with all text editors is the ability to copy to/from system clipboard so you can lets say, copy something into your vim session from firefox or vice versa, however copy pasting in terminal editors is not as straight forward as with GUI editors. In vim if you want to copy something into an auxilary space (anticipating it would be used later, so you can paste from this auxilary space) is achieved by registers.\nThe register that represents system clipboard is + register. Anything that you copy into this register is available in system clipboard.\nHow to use registers to copy/paste To copy a text into a register, select it in visual mode and press \u0026quot;\u0026lt;register_name\u0026gt;y to yank the contents into the given register. And to paste the contents of a particular register at current position, use \u0026quot;\u0026lt;register_name\u0026gt;p.\nTo use system clipboard, you just have to substitute \u0026ldquo;+\u0026rdquo; for register name in the above commands.\nclipboard support But the + register wont work unless you have clipboard support with your vim installation. By default there is no clipboard support in vim.\nTo check if your vim installation has clipboard support use:\n$ vim --version | grep clipboard +clipboard +keymap +printer +vertsplit +ex_extra +mouse_netterm +syntax +xterm_clipboard or inside of vim, you can run the command:\n:echo has(\u0026#39;clipboard\u0026#39;) If the output is 0, your installation doesnt have clipboard support.\nCompiling vim Now there are 2 solutions to this problem:\nEither install gvim: Or compile vim from sources with clipboard support Let\u0026rsquo;s see how each of them can be done.\nInstall gvim To install gvim run:\nOn Debian:\nsudo apt install vim-gtk On Fedora\nsudo dnf install gvim To compile vim with clipboard support Below are the simple steps:\nStep 1: Grab the sources Clone the repository:\ngit clone https://github.com/vim/vim.git vim cd vim Step 2: Install dependencies Install the required libraries and tools to build vim, for example gcc, x11 etc. Note that you only need them to compile vim and you are free to delete them once you are done.\nOn Debian:\nsudo apt install build-essential libx11-dev libncurses5-dev On Fedora:\nsudo dnf groupinstall \u0026#34;Development Tools\u0026#34; sudo yum install gcc sudo yum groupinstall \u0026#34;X Software Development\u0026#34; sudo dnf install libX11-devel ncurses-devel Also, you need to remove the existing installation(if any).\nOn Debian\nsudo apt remove vim On Fedora\nsudo dnf remove vim gvim Step 3: Configure and Compile Configure vim with features of your choice\n./configure \\\\ --enable-cscope \\\\ --enable-gui=auto \\\\ --enable-gtk2-check \\\\ --enable-gnome-check \\\\ --with-features=huge \\\\ --with-x Then compile and install with:\nmake sudo make install Conclusion In this article we learned how can we compile vim with clipboard support, you can also tweak configuration according to your requirements. There are many configuration options available.\n","permalink":"http://localhost:1313/personal_website/posts/how_to_compile_vim_with_clipboard_support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWhen you install vim, a usual requirement as with all text editors is\nthe ability to copy to/from system clipboard so you can lets say, copy\nsomething into your vim session from firefox or vice versa, however copy\npasting in terminal editors is not as straight forward as with GUI\neditors. In vim if you want to copy something into an auxilary space\n(anticipating it would be used later, so you can paste from this\nauxilary space) is achieved by \u003cstrong\u003eregisters\u003c/strong\u003e.\u003c/p\u003e","title":"How to compile vim with clipboard support"},{"content":" Introduction I had an unused phone lying around for some time, and I began contemplating how I could repurpose it. This led me to reflect on the impressive performance of modern smartphones and consider whether they could be utilized as servers.\nSmartphones are equipped with ARM-based processors and run on Android, which is itself built on the Linux kernel. ARM processors are renowned for their energy efficiency1 and have recently found applications in the server space2.\nAs someone who enjoys exploring the full potential of devices, I embarked on a journey to discover how I could leverage the full potential of smartphones.\nSetup Although, you would like to run your programs on phones, but programming on phones typing on screen is a horrifying idea. Fortunately, you dont have to type on your phone, what you can do is you can access its terminal, using protocols like ssh/telnet etc.\nSo, firstly you would need a terminal to control a machine remotely. Unfortunately, there are not, alot of choices available in phone space when it comes to terminal emulators. Termux is one of the few available options.\nAfter you manage to open a terminal remotely, then from there its pretty frictionless. You can install the software of your choice and write, compile and run your programs. You might also find it helpful to root your phone for root privilages, which will help you run all commands. But please beware that rooting can null your warrenty, check with local expert. If termux does\u0026rsquo;nt work for you then there are also other options like kali net hunter.\nSo, in total, we need to install termux, then we would setup ssh.\nTermux Termux is an open source terminal emulator for android. In essence, it provides you with a linux environment, within android, The only difference between actual linux environment and termex is that it is not FHS(File System Hierarcy) compliant, i.e. it does not strictly follow linux file system conventions. The consequences of that are that #! /usr/bin/sh may not work, so you have to watch out the paths. Other than that, it supports almost all commands on linux.\nMoreover, It is an app that does\u0026rsquo;nt interfere with your system so you can run your android as normal, moreover it runs without root privilages. It comes with a large repository of software found at packages.termux.dev.\nBelow are the steps to setup ssh in termux Step 1: Download texmux on playstore, f-droid or from github releases\nStep 2: Update using pkg:\npkg update # update the repositories pkg upgrade # upgrade all to latest versions Run this commands\nStep 3: Install ssh pkg install ssh install ssh\nStep 4: Set a password Setup a password that you will use to login\npasswd set password and note username\nStep 5: Note your username You will require username and ip address when logging in using ssh, hence note them. Run the command whoami the know your username. This will generally start with \u0026ldquo;a0_\u0026rdquo;\nwhoami Step 6: Note your IP address You can check your IP address in:\nsettings \u0026gt; Wi-Fi \u0026gt; click on the (i) button, on the wifi you are connected to and Look for IPv4 address Step 7: Run ssh doemon in termux On your phone, run the ssh daemon using\nsshd Step 8: Login form your computer On your computer, use the following command to login into your phone and access its terminal\nssh \u0026lt;user_name\u0026gt;@\u0026lt;IP_address\u0026gt; -p 8022 The username and IP address we already determined in step 5 and 6 resp. Note that it will promt you for password\nAftermath You can use scp command to transfer files between your computer and phone. In case you want to do development, there are a number of programming packages available in termux, you can find rust, nodejs, python, C/C++ and tools for many other programming languages.\nConclusion So, now you have successfully installed ssh in your android phone. You might find it useful to install vim, git, gcc etc. There is a large repository of packages in termux, which covers pretty much everything your would need.\nFurther Reads Simili, Emanuele, et al. \u0026ldquo;Power Efficiency in HEP (x86 vs. arm).\u0026rdquo; Power (W) 350.400 (2023): 450\u0026#160;\u0026#x21a9;\u0026#xfe0e;\narm_server\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/personal_website/posts/how_to_turn_your_old_smartphone_into_a_home_server/","summary":"\u003c!--\n---\ndate: '2025-07-15T22:33:11+05:30'\ndate: ''\ntitle: 'How_to_turn_your_old_smartphone_into_a_home_server'\n---\n--\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eI had an unused phone lying around for some time, and I began\ncontemplating how I could repurpose it. This led me to reflect on the\nimpressive performance of modern smartphones and consider whether they\ncould be utilized as servers.\u003c/p\u003e\n\u003cp\u003eSmartphones are equipped with ARM-based processors and run on Android,\nwhich is itself built on the Linux kernel. ARM processors are renowned\nfor their energy efficiency\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e and have recently found\napplications in the server space\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e","title":"How to turn your old smartphone into a home server"}]